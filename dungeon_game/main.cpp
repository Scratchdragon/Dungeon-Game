using namespace std;
#include <stdlib.h>
#include "graphics_s.hpp"
#include <SDL2/SDL.h>

#define WINDOW_WIDTH 1080
#define WINDOW_HEIGHT 600

float wall[16][16] = {{0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392},{0.37254901960784315,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.37254901960784315},{0.37254901960784315,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.37254901960784315},{0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.3607843137254902},{0.37254901960784315,0.37254901960784315,0.37254901960784315,0.3607843137254902,0.37254901960784315,0.38823529411764707,0.38823529411764707,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.3607843137254902,0.37254901960784315,0.38823529411764707,0.37254901960784315},{0.37254901960784315,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.37254901960784315},{0.3568627450980392,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902},{0.3607843137254902,0.37254901960784315,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.37254901960784315,0.37254901960784315,0.3607843137254902,0.37254901960784315,0.37254901960784315,0.38823529411764707,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315},{0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.37254901960784315},{0.3607843137254902,0.38823529411764707,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.3607843137254902},{0.3607843137254902,0.38823529411764707,0.37254901960784315,0.3607843137254902,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.38823529411764707,0.37254901960784315,0.37254901960784315,0.3607843137254902,0.37254901960784315,0.38823529411764707,0.37254901960784315},{0.3607843137254902,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.37254901960784315},{0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.3607843137254902,0.38823529411764707,0.3607843137254902},{0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.38823529411764707,0.38823529411764707,0.37254901960784315,0.3607843137254902,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.37254901960784315,0.38823529411764707,0.37254901960784315},{0.37254901960784315,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.3607843137254902,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.38823529411764707,0.37254901960784315},{0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392,0.3568627450980392}};
float glory_wall[16][16] = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};
float player[16][16] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},{0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.8784313725490196,0.8784313725490196,0,0,0,0,0,0,0},{0,0,0,0,0,0,0.9215686274509803,0.9215686274509803,0.9215686274509803,0.9215686274509803,0,0,0,0,0,0},{0,0,0,0,0,0,0.8509803921568627,0.9215686274509803,0.9215686274509803,0.8509803921568627,0,0,0,0,0,0},{0,0,0,0,0,0,0.8509803921568627,0.9294117647058824,0.9294117647058824,0.8509803921568627,0,0,0,0,0,0},{0,0,0,0,0,0,0.8509803921568627,0.9294117647058824,0.9294117647058824,0.8509803921568627,0,0,0,0,0,0},{0,0,0,0,0,0,0.8509803921568627,0.9294117647058824,0.9294117647058824,0.8509803921568627,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.8509803921568627,0.8862745098039215,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.8509803921568627,0.8862745098039215,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.8509803921568627,0.8862745098039215,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.8509803921568627,0.8862745098039215,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
float enemy[16][16] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},{0,0,0,0,0,0,1,0.21568627450980393,1,0.21568627450980393,1,0,0,0,0,0},{0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},{0,0,0,0,0,0,0,0.9019607843137255,0.9019607843137255,0.9019607843137255,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},{0,0,0,0,0,0,1,0.807843137254902,1,0.807843137254902,1,0,0,0,0,0},{0,0,0,0,0,0,1,0.807843137254902,1,0.807843137254902,1,0,0,0,0,0},{0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0},{0,0,0,0,0,0,0.9019607843137255,0,1,0,0.9019607843137255,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include "input.hpp"
#include <iostream>

struct vector{
	int x;
	int y;
};

vector vector2(int x, int y){
	vector temp; 
	temp.x = x; 
	temp.y = y; 
	return temp;
}
char oldwall[] = "â¬œ";
char oldplayer[] = "# ";
char oldenemy[] = "â“” ";
char wallGrid[] = "ðŸ”²";
char floorTile[] = "â¬›";
char chainFence[] = "ðŸ”—";
char door[] = "ðŸšª";
char chest[] = "ðŸ“¦";
char gp[] = "ðŸ’µ";

int room0[10][20] = {
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
};
int room1[10][20] = {
  {2,2,2,2,2,2,2,2,2,4,4,2,2,2,2,2,2,2,2,2},
  {2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
  {2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2}
};
int room2[10][20] = {
  {2,2,2,2,2,2,2,2,2,0,0,2,0,0,0,0,0,0,0,0},
  {2,2,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0},
  {2,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,2,2,2,2},
  {0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0},
  {2,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0},
  {2,2,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {2,2,2,2,2,2,2,2,2,0,0,2,0,0,0,0,0,0,0,0}
};
float room3[10][20] = {
  {2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2},
  {2,7,7,7,7,7,7,7,7,0,0,7,7,7,7,7,7,7,7,2},
  {2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,2},
  {2,7,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,2},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,2},
  {2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,2},
  {2,7,7,7,7,7,7,7,7,0,0,7,7,7,7,7,7,7,7,2},
  {2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2}
};

float room4a[10][20] = {
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,2,2,2,2,2,2,2,8,8,2,2,2,2,2,2,2,2,2}
};
float room4b[10][20] = {
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {8,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,2},
  {8,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
};
float room4c[10][20] = {
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8},
  {2,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
};
float room4d[10][20] = {
  {2,2,2,2,2,2,2,2,2,8,8,2,2,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
};
int room5[10][20] = {
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0},
  {2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2},
  {0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0},
  {2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2},
  {0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0}
};
int room6[10][20] = {
  {2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
  {0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2},
  {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
  {2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2}
};
int room7[10][20] = {
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,2,2,2,2,0,0,2,0,0,0,0,0,0,0,0,0},
  {0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
  {2,0,0,2,0,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2},
  {0,2,2,2,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,2,2,2,0,0,2,0,2,2,2,2,2,2,0},
  {2,2,2,2,2,0,0,0,0,2,2,2,0,2,0,0,0,0,0,2},
  {0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,2,2,2,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0}
};
int room8[10][20] = {
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,0},
  {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
  {0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0}
};

int rand_num = 0;
int generate_random(int l, int r, int count) {
   int i;
   for (i = 0; i < count; i++) {
      rand_num = (rand() % (r - l + 1)) + l;
      
   }
   return rand_num;
}

int mapSize = 28;


float map[110][220] = {};
int mapPlan[11][11] = {
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0},
};


int mapUnitMax = 11;
int countX = (0);
int countY = (0);
int playerX = (110);
int playerY = (55);
int index2 = 0;
int mapUnitX = 3;
int mapUnitY = 3;
int ratIndex = 0;
enum enemy_type {Skeleton,Rat};

struct enemy {
    int x;
    int y;
    enemy_type type;
} enemys[100];

void genMap() {
  int mapPlanIndex = 0;
  usleep(100);
  int randMapDir = 0;
  int mapGenPos[] = {0,0};

  while (mapGenPos[1] < 10) {
    mapGenPos[0] = 0;
    while (mapGenPos[0] < 10) {
      generate_random(0,8,1);
      if (rand_num == 0) {
        generate_random(0,8,1);
      }
      if (rand_num == 3) {
        generate_random(0,8,1);
      }
      if (rand_num == 4) {
        generate_random(0,8,1);
      }
      mapPlan[mapGenPos[0]][mapGenPos[1]] = rand_num;
      mapGenPos[0] = mapGenPos[0] + 1;
    }
    mapGenPos[1] = mapGenPos[1] + 1;
  } 

  mapPlan[5][5] = 1;
  return;
}

void generateMap() {
  countX = 0;
  countY = 0;
  mapUnitX = 0;
  mapUnitY = 0;
  while (mapUnitY < mapUnitMax) {
    mapUnitX = 0;
    while (mapUnitX < mapUnitMax) {
      countY = 0;
      
      generate_random(1,4,1);
      while (countY < 10) {
        countX = 0;
        while (countX < 20) {
          if (mapPlan[mapUnitY][mapUnitX] == 1) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room1[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 2) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room2[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 0) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room0[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 3) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room3[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 4) {
            if (rand_num == 1) {
              map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room4a[countY][countX];
            }
            if (rand_num == 2) {
              map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room4b[countY][countX];
            }
            if (rand_num == 3) {
              map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room4c[countY][countX];
            }
            if (rand_num == 4) {
              map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room4d[countY][countX];
            }
          }
          if (mapPlan[mapUnitY][mapUnitX] == 5) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room5[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 6) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room6[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 7) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room7[countY][countX];
          }
          if (mapPlan[mapUnitY][mapUnitX] == 8) {
            map[countY + (mapUnitY * 10)][countX + (mapUnitX  * 20)] = room8[countY][countX];
          }
          countX = countX + 1;
        }
        countY = countY + 1;
      }

      mapUnitX = mapUnitX + 1;
    }
    mapUnitY = mapUnitY + 1;
  }
  return;
}
char startK;


void type_text(char *s, float ms_delay)
{
   float usecs = ms_delay * 1000; /* 1000 microseconds per ms */

   for (; *s; s++) {
      putchar(*s);
      fflush(stdout); /* alternatively, do once: setbuf(stdout, NULL); */
      usleep(usecs);
   }
}

float Health = 40.00;
int barCount = 0;

void displayPlayerStats() {
  printf("|");
  while (barCount < (Health / 2)) {
    printf("#");
    barCount = barCount + 1;
  }
  barCount = 0;
  while (barCount < (20 - (Health / 2))) {
    printf(" ");
    barCount = barCount + 1;
  }
  printf("|");
}

void playerUpdate() {
  map[playerY][playerX] = (0);
}
int tempRand = 0;

int distance(int x1,int y1,int x2,int y2) {
  int Xdist = abs(x1 - x2);
  int Ydist = abs(y1 - y2);
  int dist = abs((Ydist / 2) + (Xdist / 2));
  return dist;
}

void generateEnemys(){
    for (int i = 0; i < 100; ++i) {
        enemys[i].x = generate_random(0,218,1);
        enemys[i].y = generate_random(0,108,1);
        enemys[i].type = Skeleton;
    }
}

int tile_in_dir(int dir,vector location){
  if(dir == 0){
    return(map[location.y - 1][location.x]);
  }
  else if(dir == 180){
    return(map[location.y + 1][location.x]);
  }
  else if(dir == 90){
    return(map[location.y][location.x + 1]);
  }
  else if(dir == 270){
    return(map[location.y][location.x - 1]);
  }
}

void ratAi() {
  for (int i = 0; i < 100; ++i) {
	if(distance(enemys[i].x,enemys[i].y,playerX,playerY) < 14){
    map[enemys[i].y][enemys[i].x] = 0;
    vector move_loc = vector2(enemys[i].x,enemys[i].y);
    vector player_pos = vector2(playerX,playerY);
    int dir = 0;
    bool found_player = false;
    int loops = 0;
    while(!found_player && loops < 20){
    loops++;
    for(int travel = 0; travel < distance(enemys[i].x,enemys[i].y,playerX,playerY); ++travel){
		dir = generate_random(1,4,1);
		if(tile_in_dir((dir - 1) * 90,move_loc) == 0){
			switch (dir) {
				case 1:
					move_loc = vector2(move_loc.x,move_loc.y - 1);
					break;
				case 2:
					move_loc = vector2(move_loc.x + 1,move_loc.y);
					break;
				case 3:
					move_loc = vector2(move_loc.x,move_loc.y + 1);
					break;
				case 4:
					move_loc = vector2(move_loc.x - 1,move_loc.y);
					break;
				default:
					break;
			}
			if(map[move_loc.y][move_loc.x] == 1){
				found_player = true;
			}
		}    
	}
	}
	}
    map[enemys[i].y][enemys[i].x] = 3;
  }
}

void render(SDL_Renderer *renderer) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);
    for (int y = 0; y < 16; ++y) {
        for (int x = 0; x < 32; ++x) {
            if(map[(playerY - 8) + y][(playerX - 16) + x] == 2) {
                draw_model(wall,wall,x*32,y*32,renderer);
            }
            if(map[(playerY - 8) + y][(playerX - 16) + x] == 1) {
                draw_model(player,player,x*32,y*32,renderer);
            }
            if(map[(playerY - 8) + y][(playerX - 16) + x] == 7) {
                draw_model(glory_wall,glory_wall,x*32,y*32,renderer);
            }
            if(map[(playerY - 8) + y][(playerX - 16) + x] == 3) {
                draw_model(enemy,enemy,x*32,y*32,renderer);
            }
        }
    }
    SDL_RenderPresent(renderer);
}
SDL_Event event;
//main loop

int loop(SDL_Renderer *renderer) {
  countY = playerY - (mapSize / 2.2);
  index2 = 0;
  map[playerY][playerX] = (1);

  ratAi();

  render(renderer);
  char key;
  SDL_Event keyevent;
    bool keyPress = false;
    while(!keyPress){
    while (SDL_PollEvent(&keyevent))
    {
	   if(keyevent.type == SDL_KEYDOWN)
	   {
            if(keyevent.key.keysym.sym == SDLK_a){
	              key = 'a';
                  keyPress = true;
            }
            if(keyevent.key.keysym.sym == SDLK_d){
	              key = 'd';
                  keyPress = true;
            }
            if(keyevent.key.keysym.sym == SDLK_w){
	              key = 'w';
                  keyPress = true;
            }
            if(keyevent.key.keysym.sym == SDLK_s){
	              key = 's';
                  keyPress = true;
            }
	   }
     else if(keyevent.type == SDL_QUIT){
       exit(0);
     }
    }
    }

  if (key == 'w') {
    playerUpdate();
    if ((map[playerY - 1][playerX]) == (0)) {
      playerY = playerY - 1;   
    }
    if ((map[playerY - 1][playerX]) == (4)) {
      playerY = playerY - 1;
    }
    if ((map[playerY - 1][playerX]) == (8)) {
      playerY = playerY - 1;
    }
    if ((map[playerY - 1][playerX]) == (9)) {
      map[playerY - 1][playerX] = (10);
    }
  }
  
 if (key == 's') {
    playerUpdate();
    if ((map[playerY + 1][playerX]) == (0)) {
      playerY = playerY + 1;   
    }
    if ((map[playerY + 1][playerX]) == (4)) {
      playerY = playerY + 1;
    }
    if ((map[playerY + 1][playerX]) == (8)) {
      playerY = playerY + 1;
    }
  }

    if (key == 'a') {
      playerUpdate();
      if ((map[playerY][playerX - 1]) == (0)) {
        playerX = playerX - 1;   
      }
      if ((map[playerY][playerX - 1]) == (4)) {
        playerX = playerX - 1;
      }
      if ((map[playerY][playerX - 1]) == (8)) {
        playerX = playerX - 1;
      }
    }

    if (key == 'd') {
      playerUpdate();
      if ((map[playerY][playerX + 1]) == (0)) {
        playerX = playerX + 1;   
      }
      if ((map[playerY][playerX + 1]) == (4)) {
        playerX = playerX + 1;
      }
      if ((map[playerY][playerX + 1]) == (8)) {
        playerX = playerX + 1;
      }
    }
  
  system("clear"); 
  return 0;
  
}

//M A I N   A N D   O N   S T A R T

void intro(void){
  system("clear");
  sleep(1);
  type_text("The ", 150);
  printf("\n   ");
  type_text("D U N G E O N", 50);
  printf("\n                ");
  type_text("of A S C I I\n\n", 50);
  usleep(500);
  type_text("\nPress any key to start\n", 50);
  scanf("%c", &startK);
}

int main(void){
  SDL_Renderer *renderer;
  SDL_Window *window;
  SDL_Init(SDL_INIT_VIDEO);
  SDL_CreateWindowAndRenderer(WINDOW_WIDTH, WINDOW_HEIGHT, 0, &window, &renderer);
  SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
  SDL_RenderClear(renderer);
  SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
      SDL_RenderPresent(renderer);
  SDL_SetWindowTitle(window,"Dungeon Game");
  SDL_Surface *icon = SDL_LoadBMP("icon.bmp");
  SDL_SetWindowIcon(window, icon);
  srand ( time(NULL) );
  genMap();
  generateMap();
  generateEnemys();
  int mainCount = 0;
  system("clear");
  bool exit_game = false; 
  while(!exit_game){
    loop(renderer);
    SDL_PollEvent(&event);  // Catching the poll event.
  }
}
